services:
  web:
    build: .
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/code
    environment:
      - DATABASE_URL=postgresql://planifitai:planifitai@db:5432/planifitai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_KEY=${OPENROUTER_KEY}
      - OPENROUTER_HTTP_REFERER=${OPENROUTER_HTTP_REFERER}
      - OPENROUTER_APP_TITLE=${OPENROUTER_APP_TITLE}
      - AI_FEATURES_ENABLED=${AI_FEATURES_ENABLED}
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - AI_SERVICE_URL=http://ai:8080
      - AI_INTERNAL_SECRET=${AI_INTERNAL_SECRET}
    depends_on:
      - db
      - redis
      - ai
    ports:
      - "8000:8000"
    networks:
      - internal
  worker:
    build: .
    command: celery -A app.background.celery_app.celery_app worker --loglevel=INFO --concurrency=1
    volumes:
      - .:/code
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - DATABASE_URL=postgresql://planifitai:planifitai@db:5432/planifitai
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENROUTER_KEY=${OPENROUTER_KEY}
      - OPENROUTER_HTTP_REFERER=${OPENROUTER_HTTP_REFERER}
      - OPENROUTER_APP_TITLE=${OPENROUTER_APP_TITLE}
      - AI_FEATURES_ENABLED=${AI_FEATURES_ENABLED}
      - AI_SERVICE_URL=http://ai:8080
      - AI_INTERNAL_SECRET=${AI_INTERNAL_SECRET}
    depends_on:
      - db
      - redis
      - ai
    networks:
      - internal
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: planifitai
      POSTGRES_PASSWORD: planifitai
      POSTGRES_DB: planifitai
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - internal
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      - internal
  ai:
    build: ./services/ai
    environment:
      - AI_INTERNAL_SECRET=${AI_INTERNAL_SECRET}
    networks:
      - internal

networks:
  internal:
    driver: bridge

volumes:
  postgres_data:
