name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0           # necesario para que gitleaks resuelva rangos de commits en PRs

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pip-audit safety

      # Escaneo de secretos SIEMPRE en servidor
      - name: Secret scan (gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Si alguna vez vuelve a fallar por rangos, descomenta:
          # GITLEAKS_ENABLE_COMMIT_RANGE: "false"
          # Si tienes .gitleaks.toml en raíz, también puedes indicar:
          # GITLEAKS_CONFIG: ".gitleaks.toml"

      # Estilo no bloqueante (avisa pero no rompe)
      - name: flake8 (non-blocking)
        run: flake8 || true

      # Tests BLOQUEANTES
      - name: pytest
        run: pytest -q

      # Auditoría de dependencias BLOQUEANTE
      - name: pip-audit (strict)
        run: pip-audit -r requirements.txt --strict

      # safety opcional/best-effort (no bloquea si no hay conexión)
      - name: safety (best-effort)
        run: safety check -r requirements.txt || true
