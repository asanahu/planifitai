name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r services/ai/requirements.txt
          pip install pytest ruff black bandit safety pip-audit

      # 1) Secret scan (servidor) — BLOQUEANTE
      - name: Secret scan (gitleaks)
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 2) Lint rápido con Ruff — BLOQUEANTE (sustituye a flake8)
      - name: Ruff (lint best-effort)
        run: ruff check . || true

      # 3) Formato con Black (modo check) — BLOQUEANTE
      - name: Black (check)
        run: black --check .

      # 4) Análisis estático de seguridad — NO bloqueante (reduce falsos positivos)
      - name: Bandit (best-effort)
        run: |
          # Ajusta "app" si tu código vive en otra carpeta
          bandit -q -r app || true

      # 5) Tests — BLOQUEANTE
      - name: Pytest
        run: pytest -q

      # 6) Auditoría de dependencias — BLOQUEANTE
      - name: pip-audit (strict)
        run: pip-audit -r requirements.txt --strict

      # 7) Safety — NO bloqueante (a veces falla por red/servidor)
      - name: Safety (best-effort)
        run: safety check -r requirements.txt || true

      - name: Ruff (ai service)
        run: ruff check services/ai

      - name: Black (ai service)
        run: black --check services/ai

      - name: Bandit (ai service)
        run: bandit -q -r services/ai || true

      - name: Pytest (ai service)
        run: pytest -q services/ai/tests

      - name: pip-audit (ai service)
        run: pip-audit -r services/ai/requirements.txt --strict

  ai-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r services/ai/requirements.txt requests
      - name: Start AI service
        env:
          AI_INTERNAL_SECRET: testsecret1234567890
        run: |
          nohup python -m uvicorn services.ai.app.main:app --host 127.0.0.1 --port 8080 >/tmp/ai.log 2>&1 &
          for i in {1..20}; do
            curl -sf http://127.0.0.1:8080/healthz && break
            sleep 1
          done
          echo "AI service log tail:"; tail -n 50 /tmp/ai.log
      - name: Signed call to /v1/embeddings
        env:
          AI_INTERNAL_SECRET: testsecret1234567890
        run: |
          python - <<'PY'
          import os, time, hmac, hashlib, json, requests
          secret = os.environ['AI_INTERNAL_SECRET'].encode()
          ts = str(int(time.time()))
          body = json.dumps({"texts":["hola"]}, separators=(',',':')).encode()
          sig = hmac.new(secret, f"{ts}.".encode()+body, hashlib.sha256).hexdigest()
          r = requests.post("http://127.0.0.1:8080/v1/embeddings",
                            headers={"X-Timestamp":ts,"X-Internal-Signature":sig,"Content-Type":"application/json"},
                            data=body, timeout=10)
          print("Status:", r.status_code, "Body:", r.text[:160])
          r.raise_for_status()
          PY

  ai-fallback:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt requests
      - name: Start monolith (no AI_SERVICE_URL)
        env:
          AI_INTERNAL_SECRET: testsecret1234567890
          DATABASE_URL: sqlite:///./test.db
          SECRET_KEY: super-secret-key
          PHI_ENCRYPTION_KEY: g-EsPSJ4RRKzU4mm2hu5SJPZ0sIL-NTnF9MYqNohuHY=
        run: |
          nohup python -m uvicorn app.main:app --host 127.0.0.1 --port 8000 >/tmp/api.log 2>&1 &
          for i in {1..20}; do
            curl -sf http://127.0.0.1:8000/health && break
            sleep 1
          done
          echo "API log tail:"; tail -n 50 /tmp/api.log
      - name: Call AI-dependent endpoint (fallback local)
        run: |
          curl -sf http://127.0.0.1:8000/api/v1/ai/echo || (echo "Fallback failed" && exit 1)

